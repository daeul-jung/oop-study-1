# 1장. 협력하는 객체들의 공동체
* 객체지향이란 실세계를 직접적이고 직관적으로 모델링할 수 있는 패러다임 …?
* 객체지향에서 가장 중요한 개념 세 가지
    * 역할 <br>
Ex) 커피를 주문하는 손님, 주문을 받는 캐시어, 커피를 제조하는 바리스타라는 역할이 존재
    * 책임 <br>
Ex) 손님은 카페인을 채우기 위해 커피를 주문할 책임을 수행, 캐시어는 손님의 주문을 받는 책임을 수행, 바리스타는 주문된 커피를 제조하는 책임을 수행
    * 협력 <br>
Ex) 커피 주문이라는 협력에 참여하는 모든 사람들은 커피가 정확하게 주문되고 주문된 커피가 손님에게 정확하게 전달될 수 있도록 맡은 바 역할과 책임을 다함
* 요청과 응답은 연쇄적으로 발생
* 협력을 위해 특정한 역할을 맡고 역할에 적합한 책임을 수행한다는 사실은 몇 가지 중요한 개념을 제시함
    * 여러 객체가 동일한 역할을 수행할 수 있다.
    * 역할은 대체 가능성을 의미한다.
    * 각 객체는 책임을 수행하는 방법은 자율적으로 선택할 수 있다.
    * 하나의 객체가 동시에 여러 역할을 수행할 수 있다.
* 객체는 두 가지 덕목을 갖춰야 하고, 두 덕목 사이에서 균형을 유지해야 한다.
    * 객체는 충분히 ‘협력적’이어야 한다.
    * 객체가 충분히 ‘자율적’이어야 한다.
* 객체를 상태(state)와 행동(behavior)을 함께 지닌 실체라고 정의함.
* 객체의 자율성은 객체의 내부와 외부를 명확하게 구분하는 것으로부터 나온다.
    * 객체의 사적인 부분은 개체 스스로 관리하고 외부에서 일체 간섭할 수 없도록 차단해야 하며, 객체의 외부에서는 접근이 허락된 수단을 통해서만 객체와 의사소통해야 한다.
    * 객체는 다른 객체가 ‘무엇(what)’을 수행하는지는 알 수 있지만 ‘어떻게(how)’ 수행하는지에 대해서는 알 수 없다.
* 객체지향의 세계에서는 메시지라는 한 가지 의사소통 수단만이 존재
* 협력을 위해 다른 객체에게 메시지를 전송(요청하는 것)하는 객체를 송신자(sender), 다른 객체로부터 메시지를 수신(다른 객체로부터 요청받는 것)하는 객체를 수신자(receiver)
* 객체가 수신된 메시지를 처리하는 방법을 메서드(method)라고 부른다.
* 메시지를 수신한 객체가 실행 시간에 메서드를 선택할 수 있다는 점은 프로시저 호출에 대한 실행 코드를 컴파일 시간에 결정하는 절차적인 언어와 확연히 구분되는 특징
* 객체지향이란 무엇인가?
    * 객체지향이란 시스템을 상호작용하는 자율적인 객체들의 공동체로 바라보고 객체를 이용해 시스템을 분할하는 방법
    * 객체는 시스템의 행위를 구현하기 위해 다른 객체와 협력한다. 각 객체는 협력 내에서 정해진 역할을 수행하며 역할은 관련된 책임의 집합
    * 객체는 다른 객체와 협력하기 위해 메시지를 전송하고, 메시지를 수신한 객체는 메시지를 처리하는 데 적합한 메서드를 자율적으로 선택
* 객체지향의 중심에는 클래스가 아니라 객체가 위치하며, 중요한 것은 클래스들의 정적인 관계가 아니라 메시지를 주고받는 객체들의 동적인 관계이다.
* 클래스의 구조와 메서드가 아니라 객체의 역할, 책임, 협력에 집중하라!
